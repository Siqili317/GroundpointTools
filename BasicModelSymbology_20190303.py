# -*- #################
# ---------------------------------------------------------------------------
# Basic_wFill_test.py
# Created on: 2018-11-09 13:15:11.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Basic_wFill_test <Project> <Output_Iteration> <Input_Surface__2_> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy.sa import *

arcpy.env.workspace = arcpy.GetParameterAsText(0)
arcpy.env.overwriteOutput = True

# Script arguments

Project = arcpy.GetParameterAsText(1)
if Project == '#' or not Project:
    Project = "<ProjectName>" # provide a default value if unspecified

Iter = arcpy.GetParameterAsText(2)
underscore = "_"
DEM = arcpy.GetParameterAsText(3)
zlimit = arcpy.GetParameterAsText(4)
ischecked = arcpy.GetParameterAsText(5)

# Local variables:
##Fill_out = "fill_test"
Fill = Project + underscore + Iter + "_Fill"
Output_drop_raster = ""
FloDir = Project + underscore + Iter + "_FloDir"
FloAcc = Project + underscore + Iter + "_FloAcc"
Sinks = Project + underscore + Iter + "_sink"
Hillshade_filled = Project + underscore + Iter + "_hillshade"


if str(ischecked) == 'true':
    arcpy.AddMessage("Run Fill before FlowDirection")
    # Process: Fill (2)
    arcpy.gp.Fill_sa(DEM, Fill, zlimit)

else:
    arcpy.AddMessage("Not running Fill before FlowDirection")
    Fill = DEM

# Process: Flow Direction
arcpy.gp.FlowDirection_sa(Fill, FloDir, "NORMAL", Output_drop_raster)   

# Process: Flow Accumulation
arcpy.AddMessage("Running Flow Accumulation")
arcpy.gp.FlowAccumulation_sa(FloDir, FloAcc, "", "FLOAT")

# Process: Sink
arcpy.AddMessage("Running Sink")
arcpy.gp.Sink_sa(FloDir, Sinks)

# Process: Hillshade
arcpy.AddMessage("Running Hillshade")
arcpy.gp.HillShade_sa(Fill, Hillshade_filled, "315", "45", "NO_SHADOWS", "1")



######FLOW ACCUMULATION CHANGE SYMBOL####################
InRas = FloAcc
OutRas = InRas + "_Out"
ReclaRas = arcpy.GetParameterAsText(0)+"/"+ InRas + "_Recla"

##Retrieves descriptive statistics about a raster dataset.
arcpy.AddMessage("Calculating raster maimum and minimum")
Ras_max = arcpy.GetRasterProperties_management(InRas,"MAXIMUM")
Ras_max = float(Ras_max[0])
Ras_min = arcpy.GetRasterProperties_management(InRas,"MINIMUM")
Ras_min = float(Ras_min[0])

##Remap

divider = arcpy.GetParameterAsText(6)
if not divider:
    divider = 250 # provide a default value if unspecified
else:
    divider = float(divider)

myRemapRange = RemapRange([[Ras_min, divider, 0], [divider, Ras_max, 1]])

##Reclassify with two classes
arcpy.AddMessage("Reclassify")
outReclassRR = Reclassify(InRas, "VALUE", myRemapRange)

outReclassRR.save(ReclaRas)

arcpy.MakeRasterLayer_management(outReclassRR, OutRas)

ref = arcpy.GetParameterAsText(7)

addLayer = arcpy.mapping.Layer(OutRas)

mxd = arcpy.mapping.MapDocument("CURRENT")
df = arcpy.mapping.ListDataFrames(mxd)[0]

if bool(ref):
    ref = ref + "\Symbology_acc.lyr"
    refLayer = arcpy.mapping.Layer(ref)
    arcpy.ApplySymbologyFromLayer_management(addLayer, refLayer)
    

arcpy.mapping.AddLayer(df, addLayer , "TOP")

######SINK ACCUMULATION CHANGE SYMBOL####################
InRas = Sinks
OutRas = InRas + "_Out"
ReclaRas = arcpy.GetParameterAsText(0)+"/"+InRas + "_Recla"

##Retrieves descriptive statistics about a raster dataset.

Ras_null = arcpy.GetRasterProperties_management(InRas,"ALLNODATA")

Ras_null = float(Ras_null.getOutput(0))


if Ras_null == 1:
    arcpy.AddMessage("Sink layer is null")
    
else:
    arcpy.AddMessage("Calculating raster maimum and minimum")
    Ras_max = arcpy.GetRasterProperties_management(InRas,"MAXIMUM")
    Ras_max = float(Ras_max.getOutput(0))
    Ras_min = arcpy.GetRasterProperties_management(InRas,"MINIMUM")
    Ras_min = float(Ras_min.getOutput(0))

    ##Remap with Only one class
    myRemapRange = RemapRange([[Ras_min, Ras_max, 1]])
    ##Reclassify
    arcpy.AddMessage("Reclassify")
    outReclassRR = Reclassify(InRas, "VALUE", myRemapRange)
    outReclassRR.save(ReclaRas)

    arcpy.MakeRasterLayer_management(outReclassRR, OutRas)

    addLayer = arcpy.mapping.Layer(OutRas)
    ref = arcpy.GetParameterAsText(7) 
    

    mxd = arcpy.mapping.MapDocument("CURRENT")
    df = arcpy.mapping.ListDataFrames(mxd)[0]
    if bool(ref):
        ref = ref + "\Symbology_sink.lyr"
        refLayer = arcpy.mapping.Layer(ref)
        arcpy.ApplySymbologyFromLayer_management(addLayer, refLayer)
        

    arcpy.mapping.AddLayer(df, addLayer , "TOP")






































